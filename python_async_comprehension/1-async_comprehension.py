#!/usr/bin/env python3
"""a coroutine called 'async_comprehension' """


import asyncio
import random
from typing import Generator
from typing import List


async def async_generator() -> Generator[float, None, None]:
    """ a coroutine called 'async_generator' """
    for _ in range(10):
        await asyncio.sleep(1)
        yield random.uniform(0, 10)


async def async_comprehension() -> List[float]:
    """
    'numbers = [num async for num in async_generator()]'
    This line creates a list called numbers using a list comprehension.
    The comprehension iterates over values generated by the
    'async_generator' coroutine.
    """
    numbers = [num async for num in async_generator()]
    return numbers
